{"version":3,"sources":["Number.js","Row.js","App.js","serviceWorker.js","index.js"],"names":["NumberForm","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","type","placeholder","props","number","onChange","React","Component","Row","_this","call","state","active","colors","color","setState","backgroundColor","_this2","className","style","backColor","onMouseOver","toggle","App","num","numChange","bind","assertThisInitialized","colorChange","handleColorChange","e","target","x","iter","i","push","src_Row","list","map","y","listItems","b","src_Number","onClick","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c94a7d93.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nexport class NumberForm extends React.Component {\r\n\r\n    render(){\r\n\r\n        const form = (\r\n            <div>\r\n                <form>\r\n                    <input type=\"text\" placeholder={this.props.number} onChange={this.props.onChange}></input>\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n\r\n        return form;\r\n    }\r\n}\r\n\r\nexport default NumberForm;","import React from 'react';\r\n\r\n\r\n export class Row extends React.Component {\r\n   constructor(props){\r\n    super(props)\r\n    this.state = {active: null, colors: this.props.color}\r\n   }\r\n\r\n   toggle(){\r\n     this.setState({\r\n         active: true\r\n     })\r\n   }\r\n\r\n   backColor(){\r\n       if(this.state.active === true){\r\n           let style = {\r\n               backgroundColor : this.state.colors\r\n           }\r\n           return style;\r\n       }else{\r\n           let style = {\r\n               backgroundColor : 'white'\r\n           }\r\n           return style;\r\n       }\r\n   }\r\n\r\n    render(){\r\n\r\n        let rows = <div className={this.props.className} style={this.backColor()} onMouseOver={() => {this.toggle()}}></div>\r\n                \r\n        return rows;\r\n    }\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\nimport './App.css';\nimport NumberForm from './Number';\nimport Row from './Row.js';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {num: 16, active: null, color: 'grey'};\n    this.numChange = this.numChange.bind(this);\n    this.colorChange = this.colorChange.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n  }\n\n  numChange(e) {\n    this.setState({\n      num: (e.target.value),\n    })\n  }\n\n  handleColorChange(e){\n    this.setState({\n      color: e.target.value,\n    })\n  }\n\n  colorChange() {\n    let style = {\n      backgroundColor: this.state.color\n    }\n\n    return style;\n  }\n  \n  render() {\n    \n    const a = [];\n    const x = [];\n    const iter = this.state.num;\n\n\n    for(let i = 0; i < iter; i++){\n      x.push( <Row className=\"hori\" color={this.state.color}/>)\n    }\n\n    const list = x.map( (y) => y);\n\n    for(let i =0; i < iter; i++){\n      a.push(\n        <div className=\"grid\">\n          {list}\n        </div>\n       )\n    }\n\n    const listItems = a.map((b) => b);\n\n    return (\n\n      <div className=\"App\">\n        \n        <NumberForm  onClick={this.handleClick} number={this.state.num} onChange={this.numChange}/>\n        <br/>\n        \n        <br/>\n        {listItems}\n      \n    </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}